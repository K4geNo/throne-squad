datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  TANK
  DPS
  HEALER
}

enum Tier {
  TIER_I
  TIER_II
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username      String?
  role          Role?
  first_weapon  String?
  second_weapon String?

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Group        Group[]
  GroupMembers GroupMembers[]

  @@map("users")
}

model Group {
  id           String   @id @default(cuid())
  name         String
  tier         Tier
  dungeon_date DateTime
  max_players  Int      @default(5)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  host_id String
  host    User   @relation(fields: [host_id], references: [id])

  GroupMembers GroupMembers[]

  @@map("groups")
}

model GroupMembers {
  id        String  @id @default(cuid())
  role      String
  isReserve Boolean @default(false)

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  group_id String
  group    Group  @relation(fields: [group_id], references: [id])

  @@map("group_members")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}
